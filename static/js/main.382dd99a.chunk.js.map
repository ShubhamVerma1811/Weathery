{"version":3,"sources":["components/Results.js","components/Input.js","App.js","serviceWorker.js","index.js"],"names":["Results","props","Object","keys","data","length","cod","className","name","sys","country","weather","description","src","icon","alt","coord","lat","lon","Math","floor","main","temp","feels_like","humidity","wind","speed","deg","Input","API_KEY","process","useState","city","setCity","receivedData","setReceivedData","a","fetch","res","json","console","log","useEffect","getData","onSubmit","e","target","firstChild","value","preventDefault","type","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6SA+DeA,MA5Df,SAAiBC,GACf,OACE,6BACGC,OAAOC,KAAKF,EAAMG,MAAMC,OAAS,EAChC,oCACsB,QAAnBJ,EAAMG,KAAKE,IACV,yBAAKC,UAAU,QACb,yBAAKA,UAAU,WACb,4BACGN,EAAMG,KAAKI,KADd,KACsBP,EAAMG,KAAKK,IAAIC,QADrC,KAIA,0BAAMH,UAAU,WACd,4BAAKN,EAAMG,KAAKO,QAAQ,GAAGC,YAA3B,KACA,yBACEC,IAAG,2CAAsCZ,EAAMG,KAAKO,QAAQ,GAAGG,KAA5D,WACHC,IAAKd,EAAMG,KAAKO,QAAQ,GAAGG,QAG/B,4BACE,4BACE,0BAAMP,UAAU,QAAhB,eAA0C,IACzCN,EAAMG,KAAKY,MAAMC,IAClB,0BAAMV,UAAU,QAAhB,kBACCN,EAAMG,KAAKY,MAAME,KAEpB,4BACE,0BAAMX,UAAU,QAAhB,iBACCY,KAAKC,MAAMnB,EAAMG,KAAKiB,KAAKC,KAAO,QAFrC,gBAIA,4BACE,0BAAMf,UAAU,QAAhB,kBACCY,KAAKC,MAAMnB,EAAMG,KAAKiB,KAAKE,WAAa,QAF3C,gBAIA,4BACE,0BAAMhB,UAAU,QAAhB,eAA0C,IACzCN,EAAMG,KAAKiB,KAAKG,SAFnB,MAIA,4BACE,0BAAMjB,UAAU,QAAhB,gBAA2C,IAC1CN,EAAMG,KAAKqB,KAAKC,MAFnB,QAIA,4BACE,0BAAMnB,UAAU,QAAhB,iBAA4C,IAC3CN,EAAMG,KAAKqB,KAAKE,IAFnB,WAQN,yEAIJ,4CCPOC,MA9Cf,WACE,IAAMC,EAAUC,mCADD,EAESC,mBAAS,aAFlB,mBAERC,EAFQ,KAEFC,EAFE,OAGyBF,mBAAS,IAHlC,mBAGRG,EAHQ,KAGMC,EAHN,iDASf,8BAAAC,EAAA,+EAEsBC,MAAM,qDAAD,OACgCL,EADhC,kBAC8CH,IAHzE,cAEUS,EAFV,gBAKuBA,EAAIC,OAL3B,OAKUnC,EALV,OAMI+B,EAAgB/B,GANpB,kDAQIoC,QAAQC,IAAR,MARJ,2DATe,sBAkCf,OA7BAC,qBAAU,YALK,mCAMbC,KACC,CAACX,IAcJU,qBAAU,WACJxC,OAAOC,KAAK+B,GAAc7B,SAE7B,CAAC6B,IAWF,yBAAK3B,UAAU,QACb,wCACA,0BAAMqC,SAXV,SAAgBC,GACd,IAAMrC,EAAOqC,EAAEC,OAAOC,WAAWC,MACpB,KAATxC,IACFyB,EAAQzB,GACRqC,EAAEI,oBAQA,2BAAOC,KAAK,OAAOC,YAAY,gCAC/B,4BAAQD,KAAK,UAAb,WAEF,kBAAC,EAAD,CAAS9C,KAAM8B,MCtCNkB,MAJf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.382dd99a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/Result/Result.css\";\r\n\r\nfunction Results(props) {\r\n  return (\r\n    <div>\r\n      {Object.keys(props.data).length > 0 ? (\r\n        <>\r\n          {props.data.cod !== \"404\" ? (\r\n            <div className=\"card\">\r\n              <div className=\"content\">\r\n                <h1>\r\n                  {props.data.name} ({props.data.sys.country})\r\n                </h1>\r\n\r\n                <span className=\"weather\">\r\n                  <h3>{props.data.weather[0].description} </h3>\r\n                  <img\r\n                    src={`http://openweathermap.org/img/wn/${props.data.weather[0].icon}@2x.png`}\r\n                    alt={props.data.weather[0].icon}\r\n                  />\r\n                </span>\r\n                <ul>\r\n                  <li>\r\n                    <span className=\"main\"> Latitude :</span>{\" \"}\r\n                    {props.data.coord.lat}\r\n                    <span className=\"main\"> | Longitude :</span>\r\n                    {props.data.coord.lon}\r\n                  </li>\r\n                  <li>\r\n                    <span className=\"main\"> Temparature </span>\r\n                    {Math.floor(props.data.main.temp - 273.15)}° celcius\r\n                  </li>\r\n                  <li>\r\n                    <span className=\"main\"> Feels like : </span>\r\n                    {Math.floor(props.data.main.feels_like - 273.15)}° celcius\r\n                  </li>\r\n                  <li>\r\n                    <span className=\"main\"> Humidity :</span>{\" \"}\r\n                    {props.data.main.humidity} %\r\n                  </li>\r\n                  <li>\r\n                    <span className=\"main\">Wind Speed :</span>{\" \"}\r\n                    {props.data.wind.speed} m/s\r\n                  </li>\r\n                  <li>\r\n                    <span className=\"main\">Wind Degree :</span>{\" \"}\r\n                    {props.data.wind.deg} deg\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <h1>City/Zip Code not found.Please try again</h1>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <h1>Loading...</h1>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Results;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"../styles/Input/Input.css\";\r\nimport Results from \"./Results\";\r\n\r\nfunction Input() {\r\n  const API_KEY = process.env.REACT_APP_API_KEY;\r\n  const [city, setCity] = useState(\"Hyderabad\");\r\n  const [receivedData, setReceivedData] = useState({});\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [city]);\r\n\r\n  async function getData() {\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`\r\n      );\r\n      const data = await res.json();\r\n      setReceivedData(data);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(receivedData).length > 0) {\r\n    }\r\n  }, [receivedData]);\r\n\r\n  function search(e) {\r\n    const name = e.target.firstChild.value;\r\n    if (name !== \"\") {\r\n      setCity(name);\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"form\">\r\n      <h1>Weathery</h1>\r\n      <form onSubmit={search}>\r\n        <input type=\"text\" placeholder=\"Enter City Name or Zip Code\" />\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n      <Results data={receivedData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport Input from \"./components/Input\";\r\n\r\nfunction App() {\r\n  return <Input />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}